dasdas

一般使用者通过shell与内核进行沟通
硬件工作 内核进行控制 使用者通过shell控制内核中的一些工具完成工作

在linux中 shell狭义的指 BASH这个文字模式的shell
广义的shell指任何帮助与内核沟通的软件
天助自助者
Bourne Again Shell bash 
the first shell invented by Steven Bourne:Bourne Shell ,sh
another one :C shell ,csh--Bill Joy

/etc/shells 查看可以使用的shell
/bin/bash linux 预设的shell
GNU计划中重要的工具软件之一
优点：命令编修功能 记忆使用过的指令 记录在~/.bash_history中 此文件中记录前一次登陆
之前的命令，此次登陆的命令在内存中，注销系统时才存入bash_history中
命令与档案补全功能tab键
命令别名设定 alias newname='[name]' 查询已有别名 直接输入alias
工作控制，前景背景控制
shell scripts 需要下达的连续指令写成一个档案，可采用对话交互式进行主机侦察工作
万用字符：*等

bash 会内建某些指令如cd
type指令查看指令类型

下达指令时，系统通过PATH这个变量里的内容所记录的路径顺序来搜寻指令
变量的定义来达到简化修改

显示变量：
echo $PATH  ($：取出变量的值 echo 显示在屏幕上)
直接给变量赋值
规则：
双引号内的特殊字符保留变量特性
单引号则为一般字符
注意转义字符
子程序中使用需要在程序中用 export
取消变量unset
"$PATH":/home  继续累加内容
等号连接 =两端不能直接接空格
export 将变量变成环境变量
`command []` 在变量中调用指令并返回参数 `之内的指令，结果作为外部输入信息
\ 跳脱字符

变量的用途：
简化路径名称
scripts中存储路径

环境变量：
env/export 查询 
HOME:使用者家目录
SHELL：目前环境使用的shell是哪个程序
HISTSIZE：历史记录笔数
ENV：个人化环境设定档的设定档案
PATH：执行文件搜寻的路径
LANG：语系档案
MAIL：邮件信箱档案
RANDOM：随机数0-32767

set查看shell环境下的所有变量
登陆加载设定档 
未加入到设定档的是临时变量
变量 PS1:提示字符的设定
$:目前shell执行代号 即PID process ID
？：上一个执行指令的回传码 0代表无错误
OSTYOE HOSTTYOE MACHTYPE 主机硬件与核心的等级
语系档案：locale -a
LANG 主语言环境等。。
查看文件时出现乱码很可能是因为语系问题
read 将键盘输入的内容存入变量-p 接提示符 -t 接等待秒数
var[index]=content array 数组
echo "${var[1],${$var[2],${var[3]}"

ulimit:限制使用者的某些系统资源

${varialble} 可以将变量进行一些修订工作
shell script 的变量判断表P380

别名与历史命令
alias unalias：alias lm='ls -l | more'
history ~/.bash_history中记录曾经下过的指令 注销时才会自动写入本次登陆信息 可以
用-w参数强制写入
！number 执行第几笔指令
！command 由最近的指令向前搜寻 可以不写全名字
！！ 执行上一步指令

./command 执行当前目录下指令

/etc/issue 终端机登陆时显示登陆信息
/etc/motd 登陆成功后显示的信息

环境设定档：
变量与别名都是针对该次登陆的设定，需要设定档才能使每次登陆都有作用
个人设定值：
.bash_login .bash_history .bashrc .bash_logout 
后输入的设定值覆盖前面的
设定档读取顺序：profile(根据profile读取其他的设定档如profile.d或inputrc）
根据不同的使用者，到使用者家目录读取.bash_profile .bash_login等设定档
最后根据不同使用者读取家目录下的.bashrc
.bashrc是最终的设定档
利用source或小数点. 将设定档内容读进到目前的shell中

负责多个案子时，每个案子所需要处理的环境变量不同，将每个案子的环境变量设定档单独编写，当需要时就source变量文件

login shell:使用者登陆linux时取得的shell 走完完整读取流程
non-login shell:登陆后再去执行的shell 读取的设定档只有.bashrc

终端机的环境设定：
stty -a 查看  也可以修改如 stty erase ^h

万用字符：
* 0个或多个字符
？ 一定有一个字符
# 批注 
\ 跳脱符号 将特殊字符还原成一般字符
| 分隔两个管线命令的界定
；连续性命令的界定
~ 使用者家目录
/ 路径分隔符
>,>> 输出导向 取代与累加
' 单引号 不具有变量置换
" 具有置换功能
` ` 两个`间 可以先执行的指令
()  中间为子shell的起始与结束
[] 字符组合
{} 命令区块的组合

例子：
test[1-5] 只有一个字符，但是范围可以是1-5
*[A-Z]* 档案名里面含有至少一个大写字母
` ` 可以用$() 取代

数据流重导向：将某些指令执行后应该出现在屏幕上的数据传输到其他的地方
1> or 1>> 标准输出 前面那个将档案清空在写入  后面则累加 若文件不存在则新建档案
          将正确的数据输出到指定的地方去
< or << 标准输入
2> or 2>> 标准错误输出 将错误的数据输出到指定的地方去
例子：ls -l / > ~/rootfile 将ls查询的根目录下的lists输出到家目录下的rootfile中
find /home -name test >list_right 2>list_error
/dev/null 虚拟垃圾桶
将数据写入同一个文档find /home -name testing > list 2>&1
< 将原本需要由键盘输入的数据，经由档案来读入
如: cat >catfile <somefile
<<代表 结束的输入字符 利用<<右侧的控制字符 可以终止一次输入
作用：
1.将屏幕输出的信息保存下来
2.背景执行程序，不干扰屏幕正常的输出结果
3.错误信息与正确讯息需要分别输出
4.保存例行命令的执行结果

命令执行的判断依据：
分号; 顺序结构
&&  前面满足才会执行后面那个
|| 前面满足执行后面 否则掠过后面
ls /tmp/vbird && echo "exit" || echo "not exit"
ls /tmp/vbird || ehco "not exit" && echo "exit" 当档案不存在
同时输出两个echo
因此需要注意顺序

管线命令：pipe
使用界定符号：|
管线命令仅能处理经由前面一个指令传来的正确信息 即standard output

攫取指令：cut grep
经由分析关键词 ，取得我们所要的那一行
cut -d '分隔字符' -f fields 以分隔符将信息分段，取出其中的第某段（一段或多端）
cut -c 以字符的单位取出固定字符区间
注意cut是逐行处理的
grep:分析一行信息 ，若包含所需信息，将该行拿出来
grep [-acinv] 'strings' filename

排序命令：
sort [-fbMnrtuk] [file or stdin]
uniq 唯一显示 与sort同时使用时，排序后重复的资料进显示一次 -i 忽略大小写
      -c 进行计数
wc 计算输出的信息的整体信息 -l :行数 -w：英文单字数 -m：字符数


G移动到这个档案的最后一行
nG移动到这个档案的第n行
gg移动到第一行
GG移动到最后一行
/word 光标之后查找word
？word 光标之前查找word
n1,n2s/word1/word2/g between n1 and n2 replace word1 with word2 
1,$s/word1/word2/g from first line to last line replace word1 with word2
dd delete the line 
ndd delete the next n lines
d1G delete from where the curse is to the first line
dG delete from where the curse is to the last line
d$ delete from where the curse is to last char of this line
d0 delete from where the curse is to the first char of this line
yy similar to dd but it's copy
H  move the curse to the top of the screen
M  move the curse to the middle of the screen
L  move the curse to the bottom of the screen
G  move the curse to the last line of the file

p,P paste in the next line and in the last line
:w [filename] save as
:r [filename] read file and add next to the current curse
:n1,n2 w [filename] save the content between n1 and n2 as [filename]
:! command   leave temporarily and run the command such as ::! ls /home
:set number(or nu) show the line number
:set nonu hide the line number
visual block :
v:every char
V:evert line
ctrl+v:select in the form of rectangle
y:copy the block
d:delete the block
多档案编辑 vim filenames1 filenames2 。。。
：n next file ;:N last file;:files list all the files opened 

multi-windows:
:sp filename
ctrl+w change window

vim record your activities by the file ~/.viminfo
when you enter your file again ,the curse with stop right at the place where you leave recently
vim环境设定参数：
un--nonu 显示/隐藏行号
autoindent--noautoindent 自动缩进
backup 备份
ruler状态列说明
showmode 显示状态列
backpace=（012) 设为2时可以任意删除值 0或1时仅可以删除刚刚输入的字符
syntax (off/on) 依据程序相关语法显示不同颜色，并检测语法错
通过修改~/.vimrc 将希望的预设值写入

linux断行符LF($) DOS: CRLF ^M$
dos2unix [-kn] file [newfile]
unix2dos [-kn] file [newfile]
-k:keep the mtime
-n:save the old version and create a new file

git clean -f 清除为跟踪文文件

注意键盘输入的结束是ctrl+d
EO
kill 命令可以关闭进程
ps查看进程
read pdf file use the command evince filename
翻墙方法SSH+autoproxy-firefox
静态变量static 生命周期与所定义的区域相同
使用条件包含预防重复包含关系，包含不同版本的头文件
寄存器变量 定义反复使用的变量
the format argunebt can be an expression too
http://www.study-area.org/network/network.htm

http://www.study-area.org/
制作U盘启动：镜像文件+u盘->将文件刻录到U盘中
P92鸟哥私房菜为什么没有hdb4?
swap虚拟内存：当有数据被存放在物理内存里，但这些数据又不是常被CPU所取用，这些不常被使用程序会被丢到虚拟内存中`

虚拟桌面
ctrl+alt+Ｆ1-6终端切换 Ｆ6切回图形界面
 tab 命令补全，档案补齐
ctal+d EOF
shell使用者接口

源代码经预处理器插入#include指定的文件 并扩展#define指定的宏
编译器产生两个源代码的汇编代码
汇编器经汇编代码转化成二进制目标文件
链接器将目标文件和代码合并并产生最终可执行代码


挂载指令 mount
特殊装置loop挂载 压缩dd 格式化mke2fs 挂载mount -o loop参数

建立虚拟内存或虚拟内存档案：mkswap swapon swapoff
休眠模式 运作中的程序状态会被记录在swap中
如何增加一颗新的硬盘在linux系统中 Ｐ290

绝对路径：一定由根目录开始
相对路径：不由/开始

mkdir -m 设定权限无视umask
-p 递归建立目录

环境变量ＰＡＴＨ
当我们执行一个指令时，系统会依照path的设定去path定义的路径下搜寻执行文件
  规范指令搜寻的目录
新增路径PATH="$PATH":/root（所需的路径）
路径中先搜到的先执行

绝对路径比相对路径更正确，相对路径可能会使用PATH

cp -a 将档案的所有属性一起复制

basename最后的文档名
dirname 目录名

cat
由第一行开始显示档案内容
• tac
从最后一行开始显示,可以看出 tac 是 cat 的倒着写!
• nl
显示的时候,顺道输出行号!
• more 一页一页的显示档案内容
• less 与 more 类似,但是比 more 更好的是,他可以往前翻页!
• head 只看头几行
• tail 只看尾巴几行
• od
以二进制的方式读取档案内容

touch 修改档案时间和新建档案
档案预设权限 umask：指定的是该默认值需要剪掉的权限
档案的预设属性：-rw-rw-rw-
目录的预设属性：drwxrwxrwx
目录的x权限指进入目录

chattr设定档案隐藏属性
Set UID 让一般使用者在执行某些程序时，能够暂时拥有该程序拥有者的权限只用于binaryfile
Set GID s权限在group中设定在binary file时在执行程序时，他的有效群组变成该程序的群组所有人；也可以设定在目录上，表示该目录内的文件或目录都是该目录的群组
Sticky Bit只针对目录有效
在具有
SBit 的目录下,使用者若在该目录下具有 w 及 x 的权限, 则当使用者在该目录下建立档案或目录时,
只有档案拥有者与 root 才有权力删除
s,t 设置成功
S,T代表无法执行

档案类型查询 file

which 根据环境变量规定的路径搜寻文档名
whereis 寻找特定档案  一定格式 针对数据库档案进行搜索
find [PATH] [option] [action]
-exec  找到内容后执行的操作以\;结束 find比较消耗硬盘
压缩原理：重复或者空 丢出或用特殊形式表示
tar 打包
gzip，bzip2 压缩
lsattr 显示档案隐藏属性

malloc return a pointor to void then coercethe pointer into desired type
:q

/bin 放置使用者可执行binary file
/etc/ /sbin/ /bin/ /dev/ /lib/与root partition放在相同partition中
因为linux系统在开机时，只会挂载一个partition 那就是/ 开机时会用到很多指令和函式库
linux使用VFS管理档案系统
man page 第一行的括号代表了指定或档案的基本含义
intel 处理器系列俗称x86
向后兼容的特性
man -k按关键字查找 -f更多相关信息
whatis 相当于man -f
who 目前有谁在线
netstat -a网络联机状态
ps 查看进程 -aux后台进程
sync数据写入磁盘
chgrp改变群组
chown 改变档案所熟人
chmod改变属性 UID
chmod a/u|g|o+/-/=r|w|x
last 读取data file
文件能否被执行，只与属性有关，与名字无关
目录树 directory tree
. 当前目录 ..上层目录
etc 系统的设定档案
etc/init.d 系统开机加载服务的scripts的摆放地点
boot 开机设定档 预设摆放vmlinuz的地方
bin 一般执行档
sbin 系统管理员长于指令集
dev 系统装置档案
var/log 系统登陆档案
.开头为隐藏档 ls -a可以查看
磁盘分割 记录每一个分区的开始和结束磁柱 记录在MBR 主要开机扇区中
将partition格式化为我的操作系统认识的档案系统
sector最小物理存储区块 512Bytes
block最小逻辑存储区块sector的2的次方
block 划分考虑读取效能和可能造成的空间浪费
每个partition就是一个档案系统 每个档案系统开始的那个block就是superblock 记录关于该档案系统的一些信息 如大小 空满状态等

inode 档案属性  block档案内容 inode不记录文件名 记录在目录所属的block区域
block大小越大，inode越少，大档案写入效率较佳，可能浪费的空间越多
inode 大小128byte
档案太过离散，读取效率低下，可将整个partition内数据全部复制出来，在将partition重新格式化。再将数据给他复制回去
日志式档案系统  透明性原则的使用
FHS filesystem Hierarchy
chmod a/u/g/o+/-/=r|w|x
netstate网络联机状态

